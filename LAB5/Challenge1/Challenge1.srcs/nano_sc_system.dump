$date
	Tue Oct 03 01:10:04 2023
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module nano_sc_system $end
$var wire 1 ! clk $end
$var wire 32 " d_data [31:0] $end
$var wire 1 # dp $end
$var wire 12 $ sw [11:0] $end
$var wire 7 % seg [6:0] $end
$var wire 32 & p_data [31:0] $end
$var wire 32 ' p_address [31:0] $end
$var wire 1 ( mem_wr $end
$var wire 32 ) d_address [31:0] $end
$var wire 4 * an [3:0] $end
$var reg 1 + clock $end
$var reg 1 , nreset $end
$scope module CPU $end
$var wire 1 + clock $end
$var wire 32 - d_address [31:0] $end
$var wire 32 . d_data [31:0] $end
$var wire 32 / data_M [31:0] $end
$var wire 32 0 instruction [31:0] $end
$var wire 1 , nreset $end
$var wire 32 1 p_address [31:0] $end
$var wire 1 2 z_new $end
$var wire 1 3 sel_wr $end
$var wire 1 4 sel_pc $end
$var wire 1 5 sel_data $end
$var wire 1 6 sel_b $end
$var wire 1 7 sel_addpc $end
$var wire 5 8 rw [4:0] $end
$var wire 5 9 rt [4:0] $end
$var wire 5 : rs [4:0] $end
$var wire 11 ; reserved [10:0] $end
$var wire 1 < reg_wr $end
$var wire 5 = rd [4:0] $end
$var wire 30 > pc_new [29:0] $end
$var wire 1 ? pc_cout $end
$var wire 30 @ pc_add_b [29:0] $end
$var wire 30 A pc_add [29:0] $end
$var wire 32 B p_data [31:0] $end
$var wire 6 C opcode [5:0] $end
$var wire 1 ( mem_wr $end
$var wire 32 D imm_ext [31:0] $end
$var wire 16 E imm [15:0] $end
$var wire 2 F ext_ops [1:0] $end
$var wire 32 G data_selected [31:0] $end
$var wire 32 H data_S [31:0] $end
$var wire 1 I c_new $end
$var wire 3 J alu_ops [2:0] $end
$var wire 30 K addr_zeroext [29:0] $end
$var wire 26 L addr [25:0] $end
$var wire 32 M B_selected [31:0] $end
$var wire 32 N B [31:0] $end
$var wire 32 O A [31:0] $end
$var reg 1 P c_flag $end
$var reg 32 Q pc [31:0] $end
$var reg 1 R z_flag $end
$scope module ALU $end
$var wire 1 P Cin $end
$var wire 1 2 z $end
$var wire 3 S alu_ops [2:0] $end
$var wire 32 T B [31:0] $end
$var wire 32 U A [31:0] $end
$var reg 1 I Cout $end
$var reg 32 V S [31:0] $end
$upscope $end
$scope module CONTROLUNIT $end
$var wire 6 W opcode [5:0] $end
$var wire 11 X reserved [10:0] $end
$var wire 1 2 z_flag $end
$var parameter 6 Y ADD $end
$var parameter 6 Z ALU $end
$var parameter 6 [ BEQ $end
$var parameter 6 \ JMP $end
$var parameter 6 ] LW $end
$var parameter 6 ^ ORI $end
$var parameter 6 _ ORUI $end
$var parameter 6 ` SW $end
$var reg 3 a alu_ops [2:0] $end
$var reg 2 b ext_ops [1:0] $end
$var reg 1 ( mem_wr $end
$var reg 1 < reg_wr $end
$var reg 1 7 sel_addpc $end
$var reg 1 6 sel_b $end
$var reg 1 5 sel_data $end
$var reg 1 4 sel_pc $end
$var reg 1 3 sel_wr $end
$upscope $end
$scope module EXTENDER $end
$var wire 16 c data16 [15:0] $end
$var wire 2 d ext_ops [1:0] $end
$var reg 32 e data32 [31:0] $end
$upscope $end
$scope module MUXADDPC $end
$var wire 30 f in0 [29:0] $end
$var wire 30 g in1 [29:0] $end
$var wire 1 7 sel $end
$var wire 30 h out [29:0] $end
$var parameter 32 i WIDTH $end
$upscope $end
$scope module MUXB $end
$var wire 32 j in1 [31:0] $end
$var wire 1 6 sel $end
$var wire 32 k out [31:0] $end
$var wire 32 l in0 [31:0] $end
$var parameter 32 m WIDTH $end
$upscope $end
$scope module MUXDATA $end
$var wire 32 n in0 [31:0] $end
$var wire 32 o in1 [31:0] $end
$var wire 1 5 sel $end
$var wire 32 p out [31:0] $end
$var parameter 32 q WIDTH $end
$upscope $end
$scope module MUXRW $end
$var wire 5 r in0 [4:0] $end
$var wire 5 s in1 [4:0] $end
$var wire 1 3 sel $end
$var wire 5 t out [4:0] $end
$var parameter 32 u WIDTH $end
$upscope $end
$scope module MUXSELPC $end
$var wire 30 v in1 [29:0] $end
$var wire 1 4 sel $end
$var wire 30 w out [29:0] $end
$var wire 30 x in0 [29:0] $end
$var parameter 32 y WIDTH $end
$upscope $end
$scope module PCADDER $end
$var wire 30 z A [29:0] $end
$var wire 30 { B [29:0] $end
$var wire 1 | Cin $end
$var wire 30 } S [29:0] $end
$var wire 1 ? Cout $end
$var parameter 32 ~ WIDTH $end
$upscope $end
$scope module REGFILE $end
$var wire 32 !" A [31:0] $end
$var wire 32 "" B [31:0] $end
$var wire 1 + clock $end
$var wire 32 #" data [31:0] $end
$var wire 1 $" nwr $end
$var wire 5 %" ra [4:0] $end
$var wire 5 &" rb [4:0] $end
$var wire 5 '" rw [4:0] $end
$var integer 32 (" i [31:0] $end
$upscope $end
$upscope $end
$scope module DATAMEM $end
$var wire 16 )" address [15:0] $end
$var wire 1 + clock $end
$var wire 32 *" data [31:0] $end
$var wire 1 # dp $end
$var wire 12 +" sw [11:0] $end
$var wire 1 ( wr $end
$var wire 19 ," tclk [18:0] $end
$var wire 1 -" targetClk $end
$var wire 7 ." seg [6:0] $end
$var wire 1 /" an3 $end
$var wire 1 0" an2 $end
$var wire 1 1" an1 $end
$var wire 1 2" an0 $end
$var wire 4 3" an [3:0] $end
$var parameter 32 4" ADDR_WIDTH $end
$var parameter 32 5" DATA_WIDTH $end
$var reg 32 6" data_out [31:0] $end
$var reg 4 7" num0 [3:0] $end
$var reg 4 8" num1 [3:0] $end
$var reg 4 9" num2 [3:0] $end
$var reg 4 :" num3 [3:0] $end
$scope begin genblk1[0] $end
$var parameter 2 ;" c $end
$scope module fDiv $end
$var wire 1 <" clk $end
$var reg 1 =" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[1] $end
$var parameter 2 >" c $end
$scope module fDiv $end
$var wire 1 ?" clk $end
$var reg 1 @" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[2] $end
$var parameter 3 A" c $end
$scope module fDiv $end
$var wire 1 B" clk $end
$var reg 1 C" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[3] $end
$var parameter 3 D" c $end
$scope module fDiv $end
$var wire 1 E" clk $end
$var reg 1 F" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[4] $end
$var parameter 4 G" c $end
$scope module fDiv $end
$var wire 1 H" clk $end
$var reg 1 I" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[5] $end
$var parameter 4 J" c $end
$scope module fDiv $end
$var wire 1 K" clk $end
$var reg 1 L" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[6] $end
$var parameter 4 M" c $end
$scope module fDiv $end
$var wire 1 N" clk $end
$var reg 1 O" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[7] $end
$var parameter 4 P" c $end
$scope module fDiv $end
$var wire 1 Q" clk $end
$var reg 1 R" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[8] $end
$var parameter 5 S" c $end
$scope module fDiv $end
$var wire 1 T" clk $end
$var reg 1 U" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[9] $end
$var parameter 5 V" c $end
$scope module fDiv $end
$var wire 1 W" clk $end
$var reg 1 X" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[10] $end
$var parameter 5 Y" c $end
$scope module fDiv $end
$var wire 1 Z" clk $end
$var reg 1 [" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[11] $end
$var parameter 5 \" c $end
$scope module fDiv $end
$var wire 1 ]" clk $end
$var reg 1 ^" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[12] $end
$var parameter 5 _" c $end
$scope module fDiv $end
$var wire 1 `" clk $end
$var reg 1 a" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[13] $end
$var parameter 5 b" c $end
$scope module fDiv $end
$var wire 1 c" clk $end
$var reg 1 d" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[14] $end
$var parameter 5 e" c $end
$scope module fDiv $end
$var wire 1 f" clk $end
$var reg 1 g" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[15] $end
$var parameter 5 h" c $end
$scope module fDiv $end
$var wire 1 i" clk $end
$var reg 1 j" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[16] $end
$var parameter 6 k" c $end
$scope module fDiv $end
$var wire 1 l" clk $end
$var reg 1 m" clkDiv $end
$upscope $end
$upscope $end
$scope begin genblk1[17] $end
$var parameter 6 n" c $end
$scope module fDiv $end
$var wire 1 o" clk $end
$var reg 1 p" clkDiv $end
$upscope $end
$upscope $end
$scope module fdivTarget $end
$var wire 1 q" clk $end
$var reg 1 -" clkDiv $end
$upscope $end
$scope module heptaSeg $end
$var wire 1 -" clk $end
$var wire 1 # dp $end
$var wire 4 r" num0 [3:0] $end
$var wire 4 s" num1 [3:0] $end
$var wire 4 t" num2 [3:0] $end
$var wire 4 u" num3 [3:0] $end
$var wire 7 v" seg [6:0] $end
$var wire 7 w" segments [6:0] $end
$var wire 1 /" an3 $end
$var wire 1 0" an2 $end
$var wire 1 1" an1 $end
$var wire 1 2" an0 $end
$var reg 4 x" dispEn [3:0] $end
$var reg 4 y" hexIn [3:0] $end
$var reg 2 z" ns [1:0] $end
$var reg 2 {" ps [1:0] $end
$scope module segmentDecode $end
$var wire 4 |" hex [3:0] $end
$var reg 7 }" segments [6:0] $end
$upscope $end
$upscope $end
$scope begin MEM_WRITE $end
$upscope $end
$upscope $end
$scope module PROGMEM $end
$var wire 16 ~" address [15:0] $end
$var wire 32 !# data [31:0] $end
$var parameter 32 "# ADDR_WIDTH $end
$var parameter 32 ## DATA_WIDTH $end
$upscope $end
$scope begin CLOCK $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
b100000 ##
b10000 "#
b10001 n"
b10000 k"
b1111 h"
b1110 e"
b1101 b"
b1100 _"
b1011 \"
b1010 Y"
b1001 V"
b1000 S"
b111 P"
b110 M"
b101 J"
b100 G"
b11 D"
b10 A"
b1 >"
b0 ;"
b100000 5"
b10000 4"
b11110 ~
b11110 y
b101 u
b100000 q
b100000 m
b11110 i
b11100 `
b10001 _
b10000 ^
b11000 ]
b110000 \
b100100 [
b1 Z
b1 Y
$end
#0
$dumpvars
bx !#
bx ~"
bx }"
bx |"
bx {"
bx z"
bx y"
bx x"
bx w"
bx v"
bx u"
bx t"
bx s"
bx r"
0q"
0p"
0o"
0m"
0l"
0j"
0i"
0g"
0f"
0d"
0c"
0a"
0`"
0^"
0]"
0["
0Z"
0X"
0W"
0U"
0T"
0R"
0Q"
0O"
0N"
0L"
0K"
0I"
0H"
0F"
0E"
0C"
0B"
0@"
0?"
0="
0<"
bx :"
bx 9"
bx 8"
bx 7"
bx 6"
bx 3"
x2"
x1"
x0"
x/"
bx ."
0-"
b0 ,"
bz +"
bx *"
bx )"
b100000 ("
bx '"
bx &"
bx %"
x$"
bx #"
bx ""
bx !"
bx }
1|
bx {
bx z
bx x
bx w
b0xxxxxxxxxxxxxxxxxxxxxxxxxx v
bx t
bx s
bx r
bx p
bx o
bx n
bx l
bx k
bx j
bx h
bx g
b0 f
bx e
bx d
bx c
bx b
bx a
bx X
bx W
bx V
bx U
bx T
bx S
xR
bx Q
xP
bx O
bx N
bx M
bx L
b0xxxxxxxxxxxxxxxxxxxxxxxxxx K
bx J
xI
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
x?
bx >
bx =
x<
bx ;
bx :
bx 9
bx 8
x7
x6
x5
x4
x3
x2
bx 1
bx 0
bx /
bx .
bx -
0,
0+
bx *
bx )
x(
bx '
bx &
bx %
bz $
0#
bx "
z!
$end
#20000
1-"
1q"
1p"
1o"
1m"
1l"
1j"
1i"
1g"
1f"
1d"
1c"
1a"
1`"
1^"
1]"
1["
1Z"
1X"
1W"
1U"
1T"
1R"
1Q"
1O"
1N"
1L"
1K"
1I"
b1 /
b1 o
b1 "
b1 .
b1 *"
1H"
b1 6"
1F"
b1 >
b1 w
b0 G
b0 p
b0 #"
b0 )"
1E"
b1 A
b1 x
b1 }
0?
0I
12
b0 )
b0 -
b0 H
b0 V
b0 n
1C"
b100 g
0$"
b0 M
b0 T
b0 k
b0 @
b0 h
b0 {
b100 J
b100 S
b100 a
1B"
b100 D
b100 e
b100 j
b0 F
b0 b
b0 d
0(
1<
05
06
03
04
07
b0 8
b0 t
b0 '"
1@"
b100 E
b100 c
b100 K
b100 v
b100 L
b1 C
b1 W
b0 O
b0 U
b0 !"
b0 :
b0 %"
b0 N
b0 l
b0 ""
b0 9
b0 s
b0 &"
b0 =
b0 r
b100 ;
b100 X
1?"
b0 z
b100000000000000000000000100 0
b100000000000000000000000100 &
b100000000000000000000000100 B
b100000000000000000000000100 !#
b0 ~"
1="
b0 '
b0 1
b0 Q
0P
0R
1<"
b1111111111111111111 ,"
1+
#40000
0<"
b1111111111111111110 ,"
0+
1,
#60000
b0zzzz /
b0zzzz o
b0zzzz "
b0zzzz .
b0zzzz *"
b0zzzz 6"
b1111111111100000 )"
02
b11111111111111111111111111100000 )
b11111111111111111111111111100000 -
b11111111111111111111111111100000 H
b11111111111111111111111111100000 V
b11111111111111111111111111100000 n
b111111111111111111111111100000 g
b11111111111111111111111111100000 M
b11111111111111111111111111100000 T
b11111111111111111111111111100000 k
b0zzzz G
b0zzzz p
b0zzzz #"
b10 >
b10 w
b11111111111111111111111111100000 D
b11111111111111111111111111100000 e
b11111111111111111111111111100000 j
13
16
15
b1 F
b1 b
b1 d
b1 8
b1 t
b1 '"
b10 A
b10 x
b10 }
b1111111111100000 E
b1111111111100000 c
b11111111111100000 K
b11111111111100000 v
b11111111111100000 L
b11000 C
b11000 W
b1 9
b1 s
b1 &"
b11111 =
b11111 r
b11111100000 ;
b11111100000 X
0?"
b1 z
b1100000000000011111111111100000 0
b1100000000000011111111111100000 &
b1100000000000011111111111100000 B
b1100000000000011111111111100000 !#
b1 ~"
0="
1R
b100 '
b100 1
b100 Q
1<"
b1111111111111111101 ,"
1+
#80000
0<"
b1111111111111111100 ,"
0+
#100000
b1111111111100100 )"
b11111111111111111111111111100100 )
b11111111111111111111111111100100 -
b11111111111111111111111111100100 H
b11111111111111111111111111100100 V
b11111111111111111111111111100100 n
b11111111111111111111111111100100 M
b11111111111111111111111111100100 T
b11111111111111111111111111100100 k
b111111111111111111111111100100 g
0B"
b11 >
b11 w
b11111111111111111111111111100100 D
b11111111111111111111111111100100 e
b11111111111111111111111111100100 j
b10 8
b10 t
b10 '"
0@"
b11 A
b11 x
b11 }
b1111111111100100 E
b1111111111100100 c
b101111111111100100 K
b101111111111100100 v
b101111111111100100 L
b10 9
b10 s
b10 &"
b11111100100 ;
b11111100100 X
1?"
b10 z
b1100000000000101111111111100100 0
b1100000000000101111111111100100 &
b1100000000000101111111111100100 B
b1100000000000101111111111100100 !#
b10 ~"
1="
b0 N
b0 l
b0 ""
b1000 '
b1000 1
b1000 Q
0R
1<"
b1111111111111111011 ,"
1+
#120000
0<"
b1111111111111111010 ,"
0+
#140000
b1111111111101000 )"
b11111111111111111111111111101000 )
b11111111111111111111111111101000 -
b11111111111111111111111111101000 H
b11111111111111111111111111101000 V
b11111111111111111111111111101000 n
b11111111111111111111111111101000 M
b11111111111111111111111111101000 T
b11111111111111111111111111101000 k
b111111111111111111111111101000 g
b100 >
b100 w
b11111111111111111111111111101000 D
b11111111111111111111111111101000 e
b11111111111111111111111111101000 j
b11 8
b11 t
b11 '"
b100 A
b100 x
b100 }
b1111111111101000 E
b1111111111101000 c
b111111111111101000 K
b111111111111101000 v
b111111111111101000 L
b11 9
b11 s
b11 &"
b11111101000 ;
b11111101000 X
0?"
b11 z
b1100000000000111111111111101000 0
b1100000000000111111111111101000 &
b1100000000000111111111111101000 B
b1100000000000111111111111101000 !#
b11 ~"
0="
b1100 '
b1100 1
b1100 Q
b0 N
b0 l
b0 ""
1<"
b1111111111111111001 ,"
1+
#160000
0<"
b1111111111111111000 ,"
0+
#180000
b1 /
b1 o
b1 "
b1 .
b1 *"
b1 6"
b0 )"
0E"
12
b0 )
b0 -
b0 H
b0 V
b0 n
0C"
b0 M
b0 T
b0 k
b0 g
b0 G
b0 p
b0 #"
1B"
b101 >
b101 w
b0 D
b0 e
b0 j
b0 F
b0 b
b0 d
05
b100 8
b100 t
b100 '"
1@"
b101 A
b101 x
b101 }
b0 E
b0 c
b1000000000000000000 K
b1000000000000000000 v
b1000000000000000000 L
b10000 C
b10000 W
b100 9
b100 s
b100 &"
b0 =
b0 r
b0 ;
b0 X
1?"
b100 z
b1000000000001000000000000000000 0
b1000000000001000000000000000000 &
b1000000000001000000000000000000 B
b1000000000001000000000000000000 !#
b100 ~"
1="
b0 N
b0 l
b0 ""
b10000 '
b10000 1
b10000 Q
1<"
b1111111111111110111 ,"
1+
#200000
0<"
b1111111111111110110 ,"
0+
#220000
x?
bx /
bx o
bx "
bx .
bx *"
b0xxx0 @
b0xxx0 h
b0xxx0 {
bx 6"
b1110 g
b0 8
b0 t
b0 '"
1$"
b0xxxx G
b0xxxx p
b0xxxx #"
b0xxxx )"
bx >
bx w
b1110 D
b1110 e
b1110 j
03
06
0<
b1 F
b1 b
b1 d
x7
x2
b0xxxx )
b0xxxx -
b0xxxx H
b0xxxx V
b0xxxx n
bx A
bx x
bx }
b1110 E
b1110 c
b11001000000000000001110 K
b11001000000000000001110 v
b11001000000000000001110 L
b100100 C
b100100 W
b0zzzz O
b0zzzz U
b0zzzz !"
b11 :
b11 %"
b1110 ;
b1110 X
0?"
b101 z
b10010000011001000000000000001110 0
b10010000011001000000000000001110 &
b10010000011001000000000000001110 B
b10010000011001000000000000001110 !#
b101 ~"
0="
1R
b10100 '
b10100 1
b10100 Q
1<"
b1111111111111110101 ,"
1+
#240000
0<"
b1111111111111110100 ,"
0+
#260000
xI
b0xxxxxxxxxxxxxxxx g
b0 @
b0 h
b0 {
bx G
bx p
bx #"
bx )"
b0 J
b0 S
b0 a
0B"
b0xxxxxxxxxxxxxxxx D
b0xxxxxxxxxxxxxxxx e
b0xxxxxxxxxxxxxxxx j
b0 F
b0 b
b0 d
07
bx )
bx -
bx H
bx V
bx n
bx M
bx T
bx k
bx 8
bx t
bx '"
0@"
bx E
bx c
b0xxxxxxxxxxxxxxxxxxxxxxxxxx K
b0xxxxxxxxxxxxxxxxxxxxxxxxxx v
bx L
bx C
bx W
bx O
bx U
bx !"
bx :
bx %"
bx N
bx l
bx ""
bx 9
bx s
bx &"
bx =
bx r
bx ;
bx X
1?"
bx z
bx 0
bx &
bx B
bx !#
bx ~"
1="
bx00 '
bx00 1
bx00 Q
xR
1<"
b1111111111111110011 ,"
1+
#280000
0<"
b1111111111111110010 ,"
0+
#300000
0?"
0="
xP
1<"
b1111111111111110001 ,"
1+
#320000
0<"
b1111111111111110000 ,"
0+
#340000
0H"
0F"
1E"
1C"
1B"
1@"
1?"
1="
1<"
b1111111111111101111 ,"
1+
#360000
0<"
b1111111111111101110 ,"
0+
#380000
0?"
0="
1<"
b1111111111111101101 ,"
1+
#400000
0<"
b1111111111111101100 ,"
0+
#420000
0B"
0@"
1?"
1="
1<"
b1111111111111101011 ,"
1+
#440000
0<"
b1111111111111101010 ,"
0+
#460000
0?"
0="
1<"
b1111111111111101001 ,"
1+
#480000
0<"
b1111111111111101000 ,"
0+
#500000
0E"
0C"
1B"
1@"
1?"
1="
1<"
b1111111111111100111 ,"
1+
#520000
0<"
b1111111111111100110 ,"
0+
#540000
0?"
0="
1<"
b1111111111111100101 ,"
1+
#560000
0<"
b1111111111111100100 ,"
0+
#580000
0B"
0@"
1?"
1="
1<"
b1111111111111100011 ,"
1+
#600000
0<"
b1111111111111100010 ,"
0+
#620000
0?"
0="
1<"
b1111111111111100001 ,"
1+
#640000
0<"
b1111111111111100000 ,"
0+
#660000
0K"
0I"
1H"
1F"
1E"
1C"
1B"
1@"
1?"
1="
1<"
b1111111111111011111 ,"
1+
#680000
0<"
b1111111111111011110 ,"
0+
#700000
0?"
0="
1<"
b1111111111111011101 ,"
1+
#720000
0<"
b1111111111111011100 ,"
0+
#740000
0B"
0@"
1?"
1="
1<"
b1111111111111011011 ,"
1+
#760000
0<"
b1111111111111011010 ,"
0+
#780000
0?"
0="
1<"
b1111111111111011001 ,"
1+
#800000
0<"
b1111111111111011000 ,"
0+
#820000
0E"
0C"
1B"
1@"
1?"
1="
1<"
b1111111111111010111 ,"
1+
#840000
0<"
b1111111111111010110 ,"
0+
#860000
0?"
0="
1<"
b1111111111111010101 ,"
1+
#880000
0<"
b1111111111111010100 ,"
0+
#900000
0B"
0@"
1?"
1="
1<"
b1111111111111010011 ,"
1+
#920000
0<"
b1111111111111010010 ,"
0+
#940000
0?"
0="
1<"
b1111111111111010001 ,"
1+
#960000
0<"
b1111111111111010000 ,"
0+
#980000
0H"
0F"
1E"
1C"
1B"
1@"
1?"
1="
1<"
b1111111111111001111 ,"
1+
#1000000
0<"
b1111111111111001110 ,"
0+
#1020000
0?"
0="
1<"
b1111111111111001101 ,"
1+
#1040000
0<"
b1111111111111001100 ,"
0+
#1060000
0B"
0@"
1?"
1="
1<"
b1111111111111001011 ,"
1+
#1080000
0<"
b1111111111111001010 ,"
0+
#1100000
0?"
0="
1<"
b1111111111111001001 ,"
1+
#1120000
0<"
b1111111111111001000 ,"
0+
#1140000
0E"
0C"
1B"
1@"
1?"
1="
1<"
b1111111111111000111 ,"
1+
#1160000
0<"
b1111111111111000110 ,"
0+
#1180000
0?"
0="
1<"
b1111111111111000101 ,"
1+
#1200000
0<"
b1111111111111000100 ,"
0+
#1220000
0B"
0@"
1?"
1="
1<"
b1111111111111000011 ,"
1+
#1240000
0<"
b1111111111111000010 ,"
0+
#1260000
0?"
0="
1<"
b1111111111111000001 ,"
1+
#1280000
0<"
b1111111111111000000 ,"
0+
#1300000
0N"
0L"
1K"
1I"
1H"
1F"
1E"
1C"
1B"
1@"
1?"
1="
1<"
b1111111111110111111 ,"
1+
#1320000
0<"
b1111111111110111110 ,"
0+
#1340000
0?"
0="
1<"
b1111111111110111101 ,"
1+
#1360000
0<"
b1111111111110111100 ,"
0+
#1380000
0B"
0@"
1?"
1="
1<"
b1111111111110111011 ,"
1+
#1400000
0<"
b1111111111110111010 ,"
0+
#1420000
0?"
0="
1<"
b1111111111110111001 ,"
1+
#1440000
0<"
b1111111111110111000 ,"
0+
#1460000
0E"
0C"
1B"
1@"
1?"
1="
1<"
b1111111111110110111 ,"
1+
#1480000
0<"
b1111111111110110110 ,"
0+
#1500000
0?"
0="
1<"
b1111111111110110101 ,"
1+
#1520000
0<"
b1111111111110110100 ,"
0+
#1540000
0B"
0@"
1?"
1="
1<"
b1111111111110110011 ,"
1+
#1560000
0<"
b1111111111110110010 ,"
0+
#1580000
0?"
0="
1<"
b1111111111110110001 ,"
1+
#1600000
0<"
b1111111111110110000 ,"
0+
#1620000
0H"
0F"
1E"
1C"
1B"
1@"
1?"
1="
1<"
b1111111111110101111 ,"
1+
#1640000
0<"
b1111111111110101110 ,"
0+
#1660000
0?"
0="
1<"
b1111111111110101101 ,"
1+
#1680000
0<"
b1111111111110101100 ,"
0+
#1700000
0B"
0@"
1?"
1="
1<"
b1111111111110101011 ,"
1+
#1720000
0<"
b1111111111110101010 ,"
0+
#1740000
0?"
0="
1<"
b1111111111110101001 ,"
1+
#1760000
0<"
b1111111111110101000 ,"
0+
#1780000
0E"
0C"
1B"
1@"
1?"
1="
1<"
b1111111111110100111 ,"
1+
#1800000
0<"
b1111111111110100110 ,"
0+
#1820000
0?"
0="
1<"
b1111111111110100101 ,"
1+
#1840000
0<"
b1111111111110100100 ,"
0+
#1860000
0B"
0@"
1?"
1="
1<"
b1111111111110100011 ,"
1+
#1880000
0<"
b1111111111110100010 ,"
0+
#1900000
0?"
0="
1<"
b1111111111110100001 ,"
1+
#1920000
0<"
b1111111111110100000 ,"
0+
#1940000
0K"
0I"
1H"
1F"
1E"
1C"
1B"
1@"
1?"
1="
1<"
b1111111111110011111 ,"
1+
#1960000
0<"
b1111111111110011110 ,"
0+
#1980000
0?"
0="
1<"
b1111111111110011101 ,"
1+
#2000000
0<"
b1111111111110011100 ,"
0+
#2020000
0B"
0@"
1?"
1="
1<"
b1111111111110011011 ,"
1+
#2040000
0<"
b1111111111110011010 ,"
0+
